#!/usr/bin/env bash

### Install with wget -qO- uny.nu/pkg | bash -s buildsys

# Check to be root
if [[ $EUID -gt 0 ]]; then
    echo "This needs to be run as root user. Not root, exiting..."
    exit
fi

# Check if git is installed
git --version >/dev/null 2>&1
git_installed=$?
if [[ ! $git_installed -eq 0 ]]; then
    echo "Git has to be installed. Exiting..."
    exit
fi

# Check if wget is installed
wget --version >/dev/null 2>&1
wget_installed=$?
if [[ ! $wget_installed -eq 0 ]]; then
    echo "wget has to be installed. Exiting..."
    exit
fi

# Check if /uny folder already exists
if [[ -d /uny ]]; then
    echo "/uny folder already exists. Exiting..."
    exit
fi

# Create directories and symlinks
mkdir -pv /uny/{git,pkg,uny,etc,tmp,dev,proc,sys,run}
mkdir -v /uny/uny/{paths,root}
ln -sv /git /uny/uny/git
ln -sv /pkg /uny/uny/pkg
ln -sv /uny/etc /etc/uny
ln -sv /etc /uny/etc/uny

# Download base system if specified
cd /uny || exit
if [[ "$1" == "buildsys" ]]; then
    base_release_url="$(wget -q --server-response https://github.com/unypkg/base/releases/latest -O- 2>&1 | grep "Location" | sed "s|  Location: ||")"
    base_download_url="$(echo "$base_release_url" | sed -e "s|/tag/|/download/|" -e "s|\([^/]*$\)|\1/unypkg-base-\1.tar.xz|")"
    echo "Downloading unypkg base system. Please wait."
    wget -q "$base_download_url" -O- | tar xJ
fi

# Download the unypkg script
if [[ ! -d /uny/git/unypkg ]]; then
    git -C /uny/git clone -b release https://github.com/unypkg/unypkg
else
    git -C /uny/git/unypkg reset --hard HEAD
    git -C /uny/git/unypkg pull
fi

# Make include-cplus file if it does not exist
if [[ ! -f /uny/uny/paths/include-cplus ]]; then
    gcc_ver="$(wget -q --server-response https://github.com/unypkg/gcc/releases/latest -O- 2>&1 | grep "Location" | sed -e "s|  Location: ||" -e "s|^.*/||" -e "s|-.*$||")"
    echo -n "/uny/pkg/gcc/$gcc_ver/include:/uny/pkg/gcc/$gcc_ver/include/c++/$gcc_ver" >/uny/uny/paths/include-cplus
fi

# Make unyp and unyc available to the system
chmod +x /uny/git/unypkg/bin/{unyp,unyc}
ln -sfv /uny/git/unypkg/bin/unyp /bin/unyp
ln -sfv /uny/git/unypkg/bin/unyc /bin/unyc

# Set PATH and functions on login in uny chroot
tee /uny/uny/root/.profile <<'EOF'
source /uny/git/unypkg/fn
uny_env_paths
EOF

# Create shell skeleton if not there
if [[ ! "$1" == "buildsys" ]]; then
    unyp install coreutils
    unyp install bash

    cat >/uny/etc/passwd <<"EOF"
root:x:0:0:root:/uny/root:/bin/bash
bin:x:1:1:bin:/dev/null:/usr/bin/false
daemon:x:6:6:Daemon User:/dev/null:/usr/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/run/dbus:/usr/bin/false
uuidd:x:80:80:UUID Generation Daemon User:/dev/null:/usr/bin/false
nobody:x:65534:65534:Unprivileged User:/dev/null:/usr/bin/false
EOF

    cat >/uny/etc/group <<"EOF"
root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
input:x:24:
mail:x:34:
kvm:x:61:
uuidd:x:80:
wheel:x:97:
users:x:999:
nogroup:x:65534:
EOF
fi

if [[ ! -f /uny/usr/bin/env ]]; then
    mkdir -pv /uny/usr/bin
    ln -sv /usr/bin /uny/bin
    ln -sv /uny/pkg/coreutils/*/bin/env /uny/usr/bin/env
    tee /uny/usr/bin/bash <<'EOF'
#!/usr/bin/env bash 
exec bash "$@"
EOF
    chmod +x /uny/usr/bin/bash
    ln -sfv bash /uny/usr/bin/sh
fi

# Which script
if [[ ! -d /uny/pkg/which ]]; then
    cat >/uny/usr/bin/which <<"EOF"
#!/usr/bin/env bash
type -pa "$@" | head -n 1 ; exit ${PIPESTATUS[0]}
EOF
    chmod -v 755 /uny/usr/bin/which
    chown -v root:root /uny/usr/bin/which
fi
