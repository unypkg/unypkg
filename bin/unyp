#!/usr/bin/env bash
# shellcheck disable=1090,1091,2001,2034,2154

unyp_dir="$(dirname "$(readlink "$0")")"
unypkg_install_dir="$(
    cd "$unyp_dir/.." || exit
    pwd
)"

shopt -s extglob
source "$unypkg_install_dir"/help
source "$unypkg_install_dir"/fn
source "$unypkg_install_dir"/fn_sh

function parse_pkg_options {
    # Parse package options
    if [[ $pkgopt == *'/'* ]]; then
        if [[ $pkgopt == *'/'*'/'* ]]; then
            if [[ $pkgopt == *'/'*'/'*'/'* ]]; then
                if [[ $pkgopt == *'/'*'/'*'/'*'/'* ]]; then
                    # Five options given, 4 slashes
                    pkg="$(echo "$pkgopt" | cut -f 1 -d "/")"
                    pkgveropt="$(echo "$pkgopt" | cut -f 2 -d "/")"
                    pkgdet1="$(echo "$pkgopt" | cut -f 3 -d "/")"
                    pkgdet2="$(echo "$pkgopt" | cut -f 4 -d "/")"
                    pkgdet3="$(echo "$pkgopt" | cut -f 5 -d "/")"
                else
                    # Four options given, 3 slashes
                    pkg="$(echo "$pkgopt" | cut -f 1 -d "/")"
                    pkgveropt="$(echo "$pkgopt" | cut -f 2 -d "/")"
                    pkgdet1="$(echo "$pkgopt" | cut -f 3 -d "/")"
                    pkgdet2="$(echo "$pkgopt" | cut -f 4 -d "/")"
                    unset pkgdet3
                fi
            else
                # Three options given, 2 slashes
                pkg="$(echo "$pkgopt" | cut -f 1 -d "/")"
                pkgveropt="$(echo "$pkgopt" | cut -f 2 -d "/")"
                pkgdet1="$(echo "$pkgopt" | cut -f 3 -d "/")"
                unset pkgdet2 pkgdet3
            fi
        else
            # Two options given, 1 slash
            pkg="$(echo "$pkgopt" | cut -f 1 -d "/")"
            pkgveropt="$(echo "$pkgopt" | cut -f 2 -d "/")"
            unset pkgdet1 pkgdet2 pkgdet3
        fi
    else
        # One option given, no slashes
        pkg="$pkgopt"
        unset pkgveropt pkgdet1 pkgdet2 pkgdet3
    fi
}

function install_packages {
    packages=("$@")
    for pkgopt in "${packages[@]}"; do
        parse_pkg_options

        # Pre download checks
        if [[ $(wget -S https://github.com/unypkg/"$pkg" -O- 2>&1 | grep -o "HTTP/.*" | sed -e "s|HTTP[^ ]* ||" -e "s|[^0-9].*||") != 200 ]]; then
            echo "${print_indent}unypkg repo https://github.com/unypkg/$pkg does not seem to exist. Aborting." && exit
        fi
        if [[ $pkgveropt == "latest" ]]; then
            pkgveropt=""
        fi

        get_pkg_release_version_and_download_url

        # Run preinstallation script
        pre_install_url="https://raw.githubusercontent.com/unypkg/$pkg/$pkg_release/0_pre_install_script.sh"
        if wget -S "$pre_install_url" -O- 2>&1 | grep -q '200 OK'; then
            echo "Running pre-installation script of package $pkg."
            wget -q "$pre_install_url" -O- | bash
        fi

        download_and_install

        # Download dependencies of package
        function install_dependencies {
            echo "${print_indent}    Installing dependencies for $pkg/$pkgver"
            deps="$(sed "s|unypkg/||g" "$rdep_file")"
            for dep in $deps; do
                if [[ -d /uny/pkg/"$dep" ]]; then
                    echo "${print_indent}      $dep is already installed."
                else
                    export print_indent="      "
                    unyp install "$dep"/lib
                    export print_indent=""
                fi
            done
        }

        if [[ $pkgdet1 =~ ^("nd"|"nodep")$ || $pkgdet2 =~ ^("nd"|"nodep")$ || $pkgdet3 =~ ^("nd"|"nodep")$ ]]; then
            echo "${print_indent}    Not installing dependencies for $pkg/$pkgver"
        else
            if [[ -s /uny/pkg/"$pkg"/"$pkgver"/rdep ]]; then
                rdep_file=/uny/pkg/"$pkg"/"$pkgver"/rdep
                install_dependencies
            elif [[ -s /uny/pkg/"$pkg"/"$pkgver"/.uny/rdep ]]; then
                rdep_file=/uny/pkg/"$pkg"/"$pkgver"/.uny/rdep
                install_dependencies
            else
                echo "${print_indent}    No run dependencies file rdep found for package $pkg. Not downloading any dependencies."
            fi
        fi

        # Run post installation script
        if [[ -s /uny/pkg/"$pkg"/"$pkgver"/.uny/1_post_install_script.sh ]]; then
            echo "Running post-installation script of package $pkg."
            source /uny/pkg/"$pkg"/"$pkgver"/.uny/1_post_install_script.sh
        fi

        # Add to paths files
        for usrpath in /uny/pkg/"$pkg"/"$pkgver"/!(vdet|rdep); do
            #pkgver="$(echo "$usrpath" | sed -e "s|.*$pkg/||" -e "s|/.*||")"
            pathtype="$(basename "$usrpath")"
            [[ ! -f /uny/uny/paths/$pathtype ]] && touch /uny/uny/paths/"$pathtype"
            if grep -q "/$pkg/[^/:]*" /uny/uny/paths/"$pathtype"; then
                sed "s+/$pkg/[^/:]*+/$pkg/$pkgver+" -i /uny/uny/paths/"$pathtype"
            else
                [[ ! $pkg == "glibc" ]] && delim=":" || delim=""
                echo -n "$delim/uny/pkg/$pkg/$pkgver/$pathtype" >>/uny/uny/paths/"$pathtype"
            fi
        done
    done
}

function system_install_packages {
    packages=("$@")
    for pkgopt in "${packages[@]}"; do
        parse_pkg_options
        if [[ ! -d /uny/pkg/"$pkg" ]]; then
            unyp install "$pkgopt"
        fi

        pkg_base=(/uny/pkg/"$pkg"/*)

        if echo "${pkg_base[0]}" | grep -q "//"; then
            echo "Something went wrong finding the package folder. Aborting."
            exit 1
        fi

        shopt -s nullglob
        declare -a bin_items
        for bin_item in "${pkg_base[0]}"/bin/* "${pkg_base[0]}"/sbin/*; do
            bin_items+=("$bin_item")
        done

        if [[ -z ${bin_items[0]} ]]; then
            echo "No executables found in installed package $pkg. Doing nothing."
        else
            ln="ln"
            for lnfile in /uny/pkg/coreutils/*/bin/ln; do
                if [[ -e "$lnfile" ]]; then
                    ln="$lnfile"
                fi
            done
            for bin_item in "${bin_items[@]}"; do
                basename_bin_item="$(basename "$bin_item")"
                dirname_bin_item="$(dirname "$bin_item")"
                base_dirname_bin_item="$(basename "$dirname_bin_item")"

                echo "Linking /$base_dirname_bin_item/uny-$basename_bin_item to $bin_item"
                $ln -sfv "$bin_item" /"$base_dirname_bin_item"/uny-"$basename_bin_item"

                base_dir_and_bin="/$base_dirname_bin_item/$basename_bin_item"
                if [[ -L $base_dir_and_bin && ! $(readlink "$base_dir_and_bin") == "uny-$basename_bin_item" ]]; then
                    echo "Backing up existing Link to $base_dirname_bin_item/${basename_bin_item}_backup"
                    mv -fv /"$base_dirname_bin_item"/"$basename_bin_item" /"$base_dirname_bin_item"/"$basename_bin_item"_backup
                elif [[ ! -e $base_dir_and_bin ]]; then
                    echo "Linking $base_dir_and_bin to /$base_dirname_bin_item/uny-$basename_bin_item"
                    $ln -sfv uny-"$basename_bin_item" /"$base_dirname_bin_item"/"$basename_bin_item"
                fi
                echo ""
            done
        fi
    done
}

function list_packages {
    ls /uny/pkg/*
}

if [[ $1 =~ (^i$|^inst$|^install$) ]]; then
    shift
    install_packages "$@"
elif [[ $1 =~ (^si$|^sysi$|^sysinst$|^system-install$) ]]; then
    shift
    system_install_packages "$@"
elif [[ $1 =~ (^l$|^ls$|^list$) ]]; then
    list_packages "$@"
elif [[ $1 =~ (^uu$|^upduny$|^update-unypkg$) ]]; then
    update_unypkg
else
    print_help_unyp
fi
