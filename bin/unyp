#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091,SC2001

shopt -s extglob
source /uny/git/unypkg/help
source /uny/git/unypkg/fn

function update_unypkg {
    git -C /uny/git/unypkg reset --hard HEAD
    git -C /uny/git/unypkg pull
    chmod +x /uny/git/unypkg/bin/{unyp,unyc}
}

function install_packages {
    packages=("$@")
    for pkgopt in "${packages[@]}"; do
        # Parse package options
        if [[ $pkgopt == *'/'* ]]; then
            if [[ $pkgopt == *'/'*'/'* ]]; then
                if [[ $pkgopt == *'/'*'/'*'/'* ]]; then
                    if [[ $pkgopt == *'/'*'/'*'/'*'/'* ]]; then
                        # Five options given, 4 slashes
                        pkg="$(echo "$pkgopt" | cut --field=1 --delimiter="/")"
                        pkgver="$(echo "$pkgopt" | cut --field=2 --delimiter="/")"
                        pkgdet1="$(echo "$pkgopt" | cut --field=3 --delimiter="/")"
                        pkgdet2="$(echo "$pkgopt" | cut --field=4 --delimiter="/")"
                        pkgdet3="$(echo "$pkgopt" | cut --field=5 --delimiter="/")"
                    else
                        # Four options given, 3 slashes
                        pkg="$(echo "$pkgopt" | cut --field=1 --delimiter="/")"
                        pkgver="$(echo "$pkgopt" | cut --field=2 --delimiter="/")"
                        pkgdet1="$(echo "$pkgopt" | cut --field=3 --delimiter="/")"
                        pkgdet2="$(echo "$pkgopt" | cut --field=4 --delimiter="/")"
                        unset pkgdet3
                    fi
                else
                    # Three options given, 2 slashes
                    pkg="$(echo "$pkgopt" | cut --field=1 --delimiter="/")"
                    pkgver="$(echo "$pkgopt" | cut --field=2 --delimiter="/")"
                    pkgdet1="$(echo "$pkgopt" | cut --field=3 --delimiter="/")"
                    unset pkgdet2 pkgdet3
                fi
            else
                # Two options given, 1 slash
                pkg="$(echo "$pkgopt" | cut --field=1 --delimiter="/")"
                pkgver="$(echo "$pkgopt" | cut --field=2 --delimiter="/")"
                unset pkgdet1 pkgdet2 pkgdet3
            fi
        else
            # One option given, no slashes
            pkg="$pkgopt"
            unset pkgver pkgdet1 pkgdet2 pkgdet3
        fi

        # Pre download checks
        if [[ $(wget --spider https://github.com/unypkg/"$pkg" 2>&1 | grep -o "HTTP.*" | sed -e "s|^.*\.\.\.[[:space:]]||" -e "s|[^0-9].*||") != 200 ]]; then
            echo "unypkg repo https://github.com/unypkg/$pkg does not seem to exist. Aborting." && exit
        fi
        if [[ $pkgver == "latest" ]]; then
            pkgver=""
        fi
        pkg_release="$(git ls-remote --refs --tags --sort="v:refname" https://github.com/unypkg/"$pkg" refs/tags/"$pkgver"* | tail -n1 | sed "s|.*refs/tags/||")"
        [[ -z $pkg_release ]] && echo "There is no release for the package $pkg with that version. Aborting." && exit

        pkgver="$(echo "$pkg_release" | sed "s|-.*$||")"
        download_url="https://github.com/unypkg/$pkg/releases/download/$pkg_release"

        # Run preinstallation script

        # Download and install
        echo "Downloading and installing: $pkg $pkg_release"
        [[ -n $pkgdet1 ]] && pkgsdir="/$pkgdet1"
        [[ -n $pkgdet2 ]] && pkgssnode="/$pkgdet2*"
        wget -q "$download_url/unypkg-$pkg.tar.xz" -O- |
            tar xJ -C /uny/pkg --wildcards "$pkg"/"$pkgver""$pkgsdir""$pkgssnode" "$pkg"/"$pkgver"/uny

        # Download dependencies of package
        if [[ $pkgdet1 =~ ^("nd"|"nodep")$ || $pkgdet2 =~ ^("nd"|"nodep")$ || $pkgdet3 =~ ^("nd"|"nodep")$ ]]; then
            echo "Not installing dependencies for $pkg/$pkgver"
        else
            if [[ -s /uny/pkg/"$pkg"/"$pkgver"/rdep ]]; then
                echo "Installing dependencies for $pkg/$pkgver"
                deps="$(sed "s|unypkg/||g" /uny/pkg/"$pkg"/"$pkgver"/rdep)"
                for dep in $deps; do
                    if [[ -d /uny/pkg/"$dep" ]]; then
                        echo "$dep is already installed."
                    else
                        unyp install "$dep"/lib
                        #find /uny/pkg/"$dep" -mindepth 1 ! -name lib -type d -exec rm -rf {} +
                    fi
                done </uny/pkg/"$pkg"/"$pkgver"/rdep
            else
                echo "No run dependencies file rdep found for package $pkg. Not downloading any dependencies."
            fi
        fi

        # Run installation script
        if [[ -s /uny/pkg/"$pkg"/"$pkgver"/uny/install_script ]]; then
            source /uny/pkg/"$pkg"/"$pkgver"/uny/install_script
        fi

        # Add to paths files
        for usrpath in /uny/pkg/"$pkg"/*/!(vdet|rdep); do
            pkgver="$(echo "$usrpath" | sed -e "s|.*$pkg/||" -e "s|/.*||")"
            pathtype="$(basename "$usrpath")"
            [[ ! -f /uny/uny/paths/$pathtype ]] && touch /uny/uny/paths/"$pathtype"
            if grep -q "/$pkg/[^/:]*" /uny/uny/paths/"$pathtype"; then
                sed "s+/$pkg/[^/:]*+/$pkg/$pkgver+" -i /uny/uny/paths/"$pathtype"
            else
                [[ ! $pkg == "glibc" ]] && delim=":" || delim=""
                echo -n "$delim/uny/pkg/$pkg/$pkgver/$pathtype" >>/uny/uny/paths/"$pathtype"
            fi
        done
    done
}

function list_packages {
    ls /uny/pkg/*
}

if [[ $1 =~ (i|inst|install) ]]; then
    shift
    install_packages "$@"
elif [[ $1 =~ (l|ls|list) ]]; then
    list_packages "$@"
elif [[ $1 =~ (uu|upduny|"update-unypkg") ]]; then
    update_unypkg
else
    print_help_unyp
fi
