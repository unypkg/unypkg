#!/usr/bin/env bash
# shellcheck disable=SC1091,SC2154,SC2086

shopt -s extglob
saved_shell_opts="$-"
if [[ $saved_shell_opts == *"x"* ]]; then
    x=yes
fi
if [[ $saved_shell_opts == *"v"* ]]; then
    v=yes
fi
set +vx

#############################################################################################################################
### General unypkg functions
function uny_build_date {
    # new vdet date information
    uny_build_date_seconds_now="$(date +%s)"
    uny_build_date_now="$(date -d @"$uny_build_date_seconds_now" +"%Y-%m-%dT%H.%M.%SZ")"
}

function uny_auto_github_conf {
    ### Setup Git and GitHub in GitHub Actions
    git config --global user.name "uny-auto"
    git config --global user.email "uny-auto@unyqly.com"
    #git config --global credential.helper cache
    git config --global advice.detachedHead false

    #    git credential approve <<EOF
    #protocol=https
    #url=https://github.com
    #username=uny-auto
    #password="$UNY_AUTO_PAT"
    #EOF
}

#############################################################################################################################
### In chroot functions

#############################################################################################################################
### Stage 1 download functions
function check_for_repo_and_create {
    # Create repo if it doesn't exist
    if [[ $(wget -q --server-response https://github.com/unypkg/"$pkgname" 2>&1 | grep HTTP | sed -e "s|[[:space:]]*HTTP/[0-9.]*[[:space:]]||" -e "s|[[:space:]]OK||") != 200 ]]; then
        [[ ! -d unygit ]] && mkdir -v unygit && git -C unygit clone https://github.com/unypkg/pkg-repo-template.git
        gh repo create unypkg/"$pkgname" --public
        git -C unygit clone https://"$GH_TOKEN"@github.com/unypkg/"$pkgname".git
        rm -rv unygit/pkg-repo-template/.git
        cp -aTv unygit/pkg-repo-template/ unygit/"$pkgname"/
        mv -v unygit/"$pkgname"/unypkg-pkg-build.sh unygit/"$pkgname"/unypkg-"$pkgname"-build.sh
        sed "s|unypkgx|$pkgname|g" -i unygit/"$pkgname"/unypkg-"$pkgname"-build.sh
        git -C unygit/"$pkgname" add .
        git -C unygit/"$pkgname" commit -m "Created unypkg repo with template unypkg/pkg-repo-template"
        git -C unygit/"$pkgname" push origin
    fi
}

function git_clone_source_repo {
    # shellcheck disable=SC2001
    pkg_head="$(echo "$latest_head" | sed "s|.*refs/[^/]*/||")"
    pkg_git_repo="$(echo "$pkggit" | cut --fields=1 --delimiter=" ")"
    pkg_git_repo_dir="$(basename "$pkg_git_repo" | cut -d. -f1)"
    [[ -d "$pkg_git_repo_dir" ]] && rm -rf "$pkg_git_repo_dir"
    # shellcheck disable=SC2086
    git clone $gitdepth --recurse-submodules -j8 --single-branch -b "$pkg_head" "$pkg_git_repo"
}

function check_if_newer_version {
    # Download last vdet file
    curl -LO https://github.com/unypkg/"$pkgname"/releases/latest/download/vdet
    old_commit_id="$(sed '2q;d' vdet)"
    uny_build_date_seconds_old="$(sed '4q;d' vdet)"
    [[ $latest_commit_id == "" ]] && latest_commit_id="$latest_ver"

    # pkg will be built, if commit id is different and newer.
    # Before a pkg is built the existence of a build-"$pkgname" file is checked
    if [[ "$latest_commit_id" != "$old_commit_id" && "$uny_build_date_seconds_now" -gt "$uny_build_date_seconds_old" ]]; then
        echo "newer" >release-"$pkgname"
    fi
}

function version_details {
    {
        echo "$latest_ver"
        echo "$latest_commit_id"
        echo "$uny_build_date_now"
        echo "$uny_build_date_seconds_now"
    } >vdet-"$pkgname"
    check_if_newer_version
}

function archiving_source {
    [[ -z $pkg_git_repo_dir ]] && pkg_git_repo_dir="$pkgname"
    [[ -z $keep_git_dir ]] && rm -rf "$pkg_git_repo_dir"/.git "$pkg_git_repo_dir"/.git*
    [[ -d "$pkgname-$latest_ver" ]] && rm -rf "$pkgname-$latest_ver"
    mv -v "$pkg_git_repo_dir" "$pkgname-$latest_ver"
    XZ_OPT="--threads=0" tar -cJpf "$pkgname-$latest_ver".tar.xz "$pkgname-$latest_ver"
    pkg_git_repo_dir=""
}

function repo_clone_version_archive {
    check_for_repo_and_create
    git_clone_source_repo
    version_details
    archiving_source
}

#############################################################################################################################
### Stage 1 chroot build functions
function unpack_cd {
    cd "$UNY"/sources/ || exit
    [[ ! -d $(echo $pkgname* | grep -Eo "$pkgname-[^0-9]*(([0-9]+\.)*[0-9]+)" | sort -u) ]] && tar xf "$pkgname"*.tar.*
    cd "$(echo $pkgname* | grep -Eo "$pkgname-[^0-9]*(([0-9]+\.)*[0-9]+)" | sort -u)" || exit
}

function cleanup {
    cd "$UNY"/sources/ || exit
    rm -rf "$(echo $pkgname* | grep -Eo "$pkgname-[^0-9]*(([0-9]+\.)*[0-9]+)" | sort -u)"
}

#############################################################################################################################
### Stage 2 and Build Scripts chroot build functions

function get_pkgconfig_paths {
    for pc in {/uny/pkg/*/*/*/pkgconfig,/uny/pkg/*/*/*/*/pkgconfig}; do
        if [ -z "$PKG_CONFIG_PATH" ]; then
            export PKG_CONFIG_PATH="$pc"
            export PKG_CONFIG_LIBDIR="$pc"
        else
            export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$pc"
            export PKG_CONFIG_LIBDIR="$PKG_CONFIG_LIBDIR:$pc"
        fi
    done
}

function uny_env_paths {
    set +vx
    if [[ -f /uny/paths/bin ]]; then
        PATH="$(cat /uny/paths/bin):$(cat /uny/paths/sbin):/usr/bin:/usr/sbin"
        export PATH

        glib_path=(/uny/pkg/glibc/*)
        export LOCPATH="${glib_path[0]}/lib/locale"
        export I18NPATH="${glib_path[0]}/share/i18n"
    fi
    get_pkgconfig_paths
    echo "PATH is:"
    echo "$PATH"
    echo "PKG_CONFIG_PATH and PKG_CONFIG_LIBDIR are:"
    echo "$PKG_CONFIG_PATH"
    set -vx
}

function add_to_paths_files {
    for usrpath in /uny/pkg/"$pkgname"/"$pkgver"/*; do
        pathtype=$(basename "$usrpath")
        [[ ! -f /uny/paths/$pathtype ]] && touch /uny/paths/"$pathtype"
        if grep -q "/$pkgname/[^/:]*" /uny/paths/"$pathtype"; then
            sed "s+/$pkgname/[^/:]*+/$pkgname/$pkgver+" -i /uny/paths/"$pathtype"
        else
            [[ ! $pkgname == "glibc" ]] && delim=":" || delim=""
            echo -n "$delim/uny/pkg/$pkgname/$pkgver/$pathtype" >>/uny/paths/"$pathtype"
        fi
    done
    # shellcheck source=/dev/null
    uny_env_paths
}

function remove_from_paths_files {
    if [[ -d /uny/pkg/$pkgname/$pkgver ]]; then
        for usrpath in /uny/pkg/"$pkgname"/"$pkgver"/!(vdet|rdep); do
            pathtype=$(basename "$usrpath")
            if grep -q "/$pkgname/[^/:]*" /uny/paths/"$pathtype"; then
                sed -z -e "s|:.[^:]*$pkgname/[^:]*||" -e "s/\n//g" -i /uny/paths/"$pathtype"
            fi
        done
        # shellcheck source=/dev/null
        uny_env_paths
    fi
}

function disable_packages {
    packages=("$@")
    for pkgopt in "${packages[@]}"; do
        if [[ $pkgopt == *'/'* ]]; then
            pkg="$(echo "$pkgopt" | cut --field=1 --delimiter="/")"
            pkgver="$(echo "$pkgopt" | cut --field=2 --delimiter="/")"
            if [[ -d /uny/pkg/$pkg/$pkgver ]]; then
                pkgname="$pkg"
                pkgconfig_dir=(/uny/pkg/"$pkg"/"$pkgver"/*/pkgconfig)
                if [[ -d ${pkgconfig_dir[0]} ]]; then
                    mv -v ${pkgconfig_dir[0]} ${pkgconfig_dir[0]}_disabled
                fi
                remove_from_paths_files
                echo "Package $pkg/$pkgver disabled."
            else
                echo "No package $pkg with version $pkgver on this system."
                exit
            fi
        else
            echo "Please specify packge to be disabled as package/version e.g. openssl/3.3.0"
            exit
        fi
    done
}

function version_verbose_log_clean_unpack_cd {
    SECONDS=0
    shopt -s nocaseglob
    pkgver="$(echo /sources/$pkgname*.tar* | sed -e "s|^.*$pkgname-||" -e "s|.tar\..*||")"
    [[ ! -d /uny/build/logs ]] && mkdir /uny/build/logs
    LOG_FILE=/uny/build/logs/"$pkgname-$pkgver"-unypkg-build-$(date -u +"%Y-%m-%dT%H.%M.%SZ").log
    exec 3>&1 4>&2
    trap 'exec 2>&4 1>&3' 0 1 2 3 15
    exec > >(tee "$LOG_FILE") 2>&1
    set -vx
    # shellcheck disable=SC2269
    pkgname="$pkgname"
    # shellcheck disable=SC2269
    pkgver="$pkgver"

    remove_from_paths_files
    if [[ ! $dont_clean == yes ]]; then
        rm -rf /uny/pkg/"$pkgname"/"$pkgver"
        rm -rf /sources/"$pkgname"*"$pkgver"
    fi
    cd /sources || exit
    tar xf "$pkgname"*.tar.*
    cd "$pkgname"-"$pkgver" || exit
}

function get_env_var_values {
    set +vx
    libpath="$(cat /uny/paths/lib):/uny/pkg/$pkgname/$pkgver/lib"
    ldflags="-Wl,-rpath=$libpath -Wl,--dynamic-linker=$(grep -o "^.*glibc/[^:]*" /uny/paths/lib)/ld-linux-x86-64.so.2" # Used at runtime
    export LDFLAGS="$ldflags"                                                                                          # Used during linking
    export LIBRARY_PATH="$libpath"                                                                                     # Used during linking
    export LD_LIBRARY_PATH="$libpath"                                                                                  # Used during linking
    export LD_RUN_PATH="$libpath"                                                                                      # Used at runtime
    export CFLAGS="-O2"
    export CXXFLAGS="${CFLAGS}"
    CMAKE_PREFIX_PATH="${libpath//\/lib/}"
    export CMAKE_PREFIX_PATH
    get_pkgconfig_paths
    echo "CMAKE_PREFIX_PATH and basis for LIBRARY_PATH is:"
    echo "$CMAKE_PREFIX_PATH"
    echo "PKG_CONFIG_PATH and PKG_CONFIG_LIBDIR are:"
    echo "$PKG_CONFIG_PATH"
    set -vx
}

function get_include_paths_temp {
    set +vx
    C_INCLUDE_PATH="$(cat /uny/paths/include-c-base):$(cat /uny/paths/include)"
    export C_INCLUDE_PATH
    CPLUS_INCLUDE_PATH="$(cat /uny/paths/include-cplus-base):$(cat /uny/paths/include)"
    export CPLUS_INCLUDE_PATH
    echo "C_INCLUDE_PATH is:"
    echo "$C_INCLUDE_PATH"
    echo "CPLUS_INCLUDE_PATH is:"
    echo "$CPLUS_INCLUDE_PATH"
    set -vx
}

function get_include_paths {
    set +vx
    C_INCLUDE_PATH="$(cat /uny/paths/include)"
    export C_INCLUDE_PATH
    CPLUS_INCLUDE_PATH="$(cat /uny/paths/include-cplus):$(cat /uny/paths/include)"
    export CPLUS_INCLUDE_PATH
    echo "C_INCLUDE_PATH is:"
    echo "$C_INCLUDE_PATH"
    echo "CPLUS_INCLUDE_PATH is:"
    echo "$CPLUS_INCLUDE_PATH"
    set -vx
}

function dependencies_file_and_unset_vars {
    for o in /uny/pkg/"$pkgname"/"$pkgver"/{lib,bin,sbin}/*; do
        if [[ ! -L $o && -f $o ]]; then
            echo "Shared objects required by: $o"
            ldd "$o"
            ldd "$o" | grep -v "$pkgname/$pkgver" | sed "s|^.*ld-linux.*||" | grep -o "uny/pkg\(.*\)" | sed -e "s+uny/pkg/+unypkg/+" | grep -Eo "(unypkg/[a-z0-9_-]+/[0-9.]*)" | sort -u >>/uny/pkg/"$pkgname"/"$pkgver"/rdep
        fi
    done
    sort -u /uny/pkg/"$pkgname"/"$pkgver"/rdep -o /uny/pkg/"$pkgname"/"$pkgver"/rdep
    if [[ -n ${manual_deps[*]} ]]; then
        for mandep in "${manual_deps[@]}"; do
            mandep_ver="$(basename /uny/pkg/"$mandep"/*)"
            echo unypkg/"$mandep"/"$mandep_ver" >>/uny/pkg/"$pkgname"/"$pkgver"/rdep
        done
    fi
    echo "Packages required by unypkg/$pkgname/$pkgver:"
    cat /uny/pkg/"$pkgname"/"$pkgver"/rdep

    unset CPATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH LIBRARY_PATH LD_RUN_PATH LDFLAGS CFLAGS
}

function cleanup_verbose_off_timing_end {
    rm -rf /sources/"$pkgname"*"$pkgver"
    shopt -u nocaseglob
    duration=$SECONDS
    echo "$((duration / 60)) minutes and $((duration % 60)) seconds elapsed."
    set +vx
    exec 2>&4 1>&3
}

#############################################################################################################################
### Stripping and packaging functions
function binary_stripping {
    for i in $(find /uny/pkg/$pkgname/$latest_ver/lib -type f -name '*.so*' ! -name '*dbg') \
        $(find /uny/pkg/$pkgname/$latest_ver/lib -type f -name '*.a') \
        $(find /uny/pkg/$pkgname/$latest_ver/{bin,sbin,libexec} -type f); do
        strip --strip-unneeded $i
    done
}

function github_release {
    XZ_OPT="-9 --threads=0" tar -cJpf unypkg-"$pkg".tar.xz "$pkg"
    gh -R unypkg/"$pkg" release create "$pkgv"-"$uny_build_date_now" --generate-notes \
        "$pkg/$pkgv/.uny/vdet#vdet - $vdet_content" "$gh_rdep_file" unypkg-"$pkg".tar.xz "$pkg"-build.log "$source_archive_new"
}

function package_unypkg {
    binary_stripping
    cd /uny/pkg || exit
    for pkg in /uny/sources/release-*; do
        vdet_new_file="${pkg//release-/vdet-}"
        vdet_content="$(cat "$vdet_new_file")"

        pkg="$(echo "$pkg" | grep -Eo "release.*" | sed -e "s|release-||")"
        pkgv="$(echo "$vdet_content" | head -n 1)"

        mkdir "$pkg"/"$pkgv"/.uny
        cp "$vdet_new_file" "$pkg"/"$pkgv"/.uny/vdet
        rm -f /home/runner/work/"$pkg"/"$pkg"/UNY_AUTO_PAT /home/runner/work/"$pkg"/"$pkg"/GH_TOKEN
        cp /home/runner/work/"$pkg"/"$pkg"/* "$pkg"/"$pkgv"/.uny/

        source_archive_orig="$(echo /uny/sources/"$pkg"-"$pkgv".tar.*)"
        source_archive_new="$(echo "$source_archive_orig" | sed -r -e "s|^.*/||" -e "s|(\.tar.*$)|-source\1|")"
        cp -a "$source_archive_orig" "$source_archive_new"
        cp -a /uny/uny/build/logs/"$pkg"-*.log "$pkg"-build.log

        if [[ -s "$pkg"/"$pkgv"/rdep ]]; then
            mv "$pkg"/"$pkgv"/rdep "$pkg"/"$pkgv"/.uny/rdep
            rdep_content="$(sed "s|unypkg/||" "$pkg"/"$pkgv"/.uny/rdep)"
            if [[ "${#rdep_content}" -gt 200 ]]; then
                rdep_content="$(for i in {1..5}; do sed -n ${i}p <<<$rdep_content; done) ..."
            fi
            gh_rdep_file="$pkg/$pkgv/.uny/rdep#rdep - $rdep_content"
            github_release
        else
            echo "nd" >"$pkg"/"$pkgv"/.uny/nordep
            gh_rdep_file="$pkg/$pkgv/.uny/nordep#nordep - No run dependencies"
            github_release
        fi
    done
}

if [[ $x == "yes" ]]; then
    set -x
    x=""
fi
if [[ $v == "yes" ]]; then
    set -v
    v=""
fi
saved_shell_opts=""
